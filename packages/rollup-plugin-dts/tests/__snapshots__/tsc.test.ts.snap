// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`tsc > composite references 1`] = `
"// input1.d.ts
//#region tests/fixtures/composite-refs/dir1/input1.d.ts
declare const input1 = "input1";
//#endregion
export { input1 };
// input1.js
//#region tests/fixtures/composite-refs/dir1/input1.ts
const input1 = "input1";

//#endregion
export { input1 };
// input2.d.ts
//#region tests/fixtures/composite-refs/dir2/input2.d.ts
declare const input2 = "input2";
//#endregion
export { input2 };
// input2.js
//#region tests/fixtures/composite-refs/dir2/input2.ts
const input2 = "input2";

//#endregion
export { input2 };"
`;

exports[`tsc > composite references incremental 1`] = `
"// input1.d.ts
//#region tests/fixtures/composite-refs-incremental/dir1/input1.d.ts
declare const input1 = "input1";
//#endregion
export { input1 };
// input1.js
//#region tests/fixtures/composite-refs-incremental/dir1/input1.ts
const input1 = "input1";

//#endregion
export { input1 };
// input2.d.ts
//#region tests/fixtures/composite-refs-incremental/dir2/input2.d.ts
declare const input2 = "input2";
//#endregion
export { input2 };
// input2.js
//#region tests/fixtures/composite-refs-incremental/dir2/input2.ts
const input2 = "input2";

//#endregion
export { input2 };"
`;

exports[`tsc > jsdoc 1`] = `
"// jsdoc.d.ts
import { Plugin } from "rolldown";

//#region tests/fixtures/jsdoc.d.ts

/**
 * with imports
 */
interface RollupMdiFontminOptions extends Plugin {}
/**
 * named export
 */
declare function fn(): number;
/**
 * options
 */
interface Options {
  /**
   * interface member
   */
  foo: string;
}
/**
 * type alias
 */
type Foo = string;
/**
 * default export
 */
declare const _default: number;
//#endregion
export { Foo, Options, RollupMdiFontminOptions, _default as default, fn };
// jsdoc.js
//#region tests/fixtures/jsdoc.ts
/**
* named export
*/
function fn() {
	return 42;
}
/**
* default export
*/
var jsdoc_default = fn();

//#endregion
export { jsdoc_default as default, fn };"
`;

exports[`tsc > jsdoc in js 1`] = `
"// main.d.ts
//#region tests/fixtures/jsdoc-js/main.d.ts
/**
 * Does bar.
 *
 * @param {string} baz
 * @returns {void}
 */
declare function foo(baz: string): void;
//#endregion
export { foo };"
`;

exports[`tsc > multi declarations 1`] = `
"// index.d.ts
//#region tests/fixtures/multi-decls/mod.d.ts
declare const a: 1, b: 2;
//#endregion
//#region tests/fixtures/multi-decls/index.d.ts
declare const a$1 = 3,
  b$1 = 3;
//#endregion
export { a, b, a$1 as c, b$1 as d };"
`;

exports[`tsc > references 1`] = `
"// index.d.ts
//#region tests/fixtures/refs/src/index.d.ts
declare const a = 1;
//#endregion
export { a };
// index.js
//#region tests/fixtures/refs/src/index.ts
const a = 1;

//#endregion
export { a };"
`;

exports[`tsc > typescript compiler 1`] = `
"// entry1.d.ts

declare const str = "foo";
declare const num = 42;
declare const bool = true;
declare function fn(arg: typeof str): "foo" | 1;
//#endregion
export { bool, fn, num, str };
// entry2.d.ts

interface Unused {
  foo: string;
}
//#endregion
export { Unused };"
`;

exports[`tsc > vue-sfc w/ ts-compiler 1`] = `
"// main.d.ts
import * as vue0 from "vue";

//#region tests/fixtures/vue-sfc/App.vue.d.ts
type __VLS_Props = {
  foo: string;
};
declare global {
  interface Window {
    foo: string;
  }
}
declare const _default: vue0.DefineComponent<__VLS_Props, {}, {}, {}, {}, vue0.ComponentOptionsMixin, vue0.ComponentOptionsMixin, {}, string, vue0.PublicProps, Readonly<__VLS_Props> & Readonly<{}>, {}, {}, {}, {}, string, vue0.ComponentProvideOptions, false, {}, any>;
//#endregion
export { _default as App };"
`;

exports[`tsc > vue-sfc w/ ts-compiler w/ vueCompilerOptions in tsconfig 1`] = `
"// main.d.ts
import * as vue0 from "vue";

//#region tests/fixtures/vue-sfc-fallthrough/App.vue.d.ts
declare const _default: vue0.DefineComponent<{
  foo: string;
  bar?: string;
  innerHTML?: string;
  class?: any;
  style?: vue0.StyleValue;
  accesskey?: string;
  contenteditable?: (boolean | "true" | "false") | "inherit" | "plaintext-only";
  contextmenu?: string;
  dir?: string;
  draggable?: boolean | "true" | "false";
  hidden?: (boolean | "true" | "false") | "" | "hidden" | "until-found";
  id?: string;
  inert?: boolean | "true" | "false";
  lang?: string;
  placeholder?: string;
  spellcheck?: boolean | "true" | "false";
  tabindex?: string | number;
  title?: string;
  translate?: "yes" | "no";
  radiogroup?: string;
  role?: string;
  about?: string;
  datatype?: string;
  inlist?: any;
  prefix?: string;
  property?: string;
  resource?: string;
  typeof?: string;
  vocab?: string;
  autocapitalize?: string;
  autocorrect?: string;
  autosave?: string;
  color?: string;
  itemprop?: string;
  itemscope?: boolean | "true" | "false";
  itemtype?: string;
  itemid?: string;
  itemref?: string;
  results?: string | number;
  security?: string;
  unselectable?: "on" | "off";
  inputmode?: "none" | "text" | "tel" | "url" | "email" | "numeric" | "decimal" | "search";
  is?: string;
  'aria-activedescendant'?: string;
  'aria-atomic'?: boolean | "true" | "false";
  'aria-autocomplete'?: "none" | "inline" | "list" | "both";
  'aria-busy'?: boolean | "true" | "false";
  'aria-checked'?: (boolean | "true" | "false") | "mixed";
  'aria-colcount'?: string | number;
  'aria-colindex'?: string | number;
  'aria-colspan'?: string | number;
  'aria-controls'?: string;
  'aria-current'?: (boolean | "true" | "false") | "page" | "step" | "location" | "date" | "time";
  'aria-describedby'?: string;
  'aria-details'?: string;
  'aria-disabled'?: boolean | "true" | "false";
  'aria-dropeffect'?: "none" | "copy" | "execute" | "link" | "move" | "popup";
  'aria-errormessage'?: string;
  'aria-expanded'?: boolean | "true" | "false";
  'aria-flowto'?: string;
  'aria-grabbed'?: boolean | "true" | "false";
  'aria-haspopup'?: (boolean | "true" | "false") | "menu" | "listbox" | "tree" | "grid" | "dialog";
  'aria-hidden'?: boolean | "true" | "false";
  'aria-invalid'?: (boolean | "true" | "false") | "grammar" | "spelling";
  'aria-keyshortcuts'?: string;
  'aria-label'?: string;
  'aria-labelledby'?: string;
  'aria-level'?: string | number;
  'aria-live'?: "off" | "assertive" | "polite";
  'aria-modal'?: boolean | "true" | "false";
  'aria-multiline'?: boolean | "true" | "false";
  'aria-multiselectable'?: boolean | "true" | "false";
  'aria-orientation'?: "horizontal" | "vertical";
  'aria-owns'?: string;
  'aria-placeholder'?: string;
  'aria-posinset'?: string | number;
  'aria-pressed'?: (boolean | "true" | "false") | "mixed";
  'aria-readonly'?: boolean | "true" | "false";
  'aria-relevant'?: "additions" | "additions removals" | "additions text" | "all" | "removals" | "removals additions" | "removals text" | "text" | "text additions" | "text removals";
  'aria-required'?: boolean | "true" | "false";
  'aria-roledescription'?: string;
  'aria-rowcount'?: string | number;
  'aria-rowindex'?: string | number;
  'aria-rowspan'?: string | number;
  'aria-selected'?: boolean | "true" | "false";
  'aria-setsize'?: string | number;
  'aria-sort'?: "none" | "ascending" | "descending" | "other";
  'aria-valuemax'?: string | number;
  'aria-valuemin'?: string | number;
  'aria-valuenow'?: string | number;
  'aria-valuetext'?: string;
  onCopy?: (payload: ClipboardEvent) => void;
  onCut?: (payload: ClipboardEvent) => void;
  onPaste?: (payload: ClipboardEvent) => void;
  onCompositionend?: (payload: CompositionEvent) => void;
  onCompositionstart?: (payload: CompositionEvent) => void;
  onCompositionupdate?: (payload: CompositionEvent) => void;
  onDrag?: (payload: DragEvent) => void;
  onDragend?: (payload: DragEvent) => void;
  onDragenter?: (payload: DragEvent) => void;
  onDragexit?: (payload: DragEvent) => void;
  onDragleave?: (payload: DragEvent) => void;
  onDragover?: (payload: DragEvent) => void;
  onDragstart?: (payload: DragEvent) => void;
  onDrop?: (payload: DragEvent) => void;
  onFocus?: (payload: FocusEvent) => void;
  onFocusin?: (payload: FocusEvent) => void;
  onFocusout?: (payload: FocusEvent) => void;
  onBlur?: (payload: FocusEvent) => void;
  onChange?: (payload: Event) => void;
  onBeforeinput?: (payload: Event) => void;
  onInput?: (payload: Event) => void;
  onReset?: (payload: Event) => void;
  onSubmit?: (payload: Event) => void;
  onInvalid?: (payload: Event) => void;
  onLoad?: (payload: Event) => void;
  onError?: (payload: Event) => void;
  onKeydown?: (payload: KeyboardEvent) => void;
  onKeypress?: (payload: KeyboardEvent) => void;
  onKeyup?: (payload: KeyboardEvent) => void;
  onAuxclick?: (payload: MouseEvent) => void;
  onClick?: (payload: MouseEvent) => void;
  onContextmenu?: (payload: MouseEvent) => void;
  onDblclick?: (payload: MouseEvent) => void;
  onMousedown?: (payload: MouseEvent) => void;
  onMouseenter?: (payload: MouseEvent) => void;
  onMouseleave?: (payload: MouseEvent) => void;
  onMousemove?: (payload: MouseEvent) => void;
  onMouseout?: (payload: MouseEvent) => void;
  onMouseover?: (payload: MouseEvent) => void;
  onMouseup?: (payload: MouseEvent) => void;
  onAbort?: (payload: Event) => void;
  onCanplay?: (payload: Event) => void;
  onCanplaythrough?: (payload: Event) => void;
  onDurationchange?: (payload: Event) => void;
  onEmptied?: (payload: Event) => void;
  onEncrypted?: (payload: Event) => void;
  onEnded?: (payload: Event) => void;
  onLoadeddata?: (payload: Event) => void;
  onLoadedmetadata?: (payload: Event) => void;
  onLoadstart?: (payload: Event) => void;
  onPause?: (payload: Event) => void;
  onPlay?: (payload: Event) => void;
  onPlaying?: (payload: Event) => void;
  onProgress?: (payload: Event) => void;
  onRatechange?: (payload: Event) => void;
  onSeeked?: (payload: Event) => void;
  onSeeking?: (payload: Event) => void;
  onStalled?: (payload: Event) => void;
  onSuspend?: (payload: Event) => void;
  onTimeupdate?: (payload: Event) => void;
  onVolumechange?: (payload: Event) => void;
  onWaiting?: (payload: Event) => void;
  onSelect?: (payload: Event) => void;
  onScroll?: (payload: Event) => void;
  onScrollend?: (payload: Event) => void;
  onTouchcancel?: (payload: TouchEvent) => void;
  onTouchend?: (payload: TouchEvent) => void;
  onTouchmove?: (payload: TouchEvent) => void;
  onTouchstart?: (payload: TouchEvent) => void;
  onPointerdown?: (payload: PointerEvent) => void;
  onPointermove?: (payload: PointerEvent) => void;
  onPointerup?: (payload: PointerEvent) => void;
  onPointercancel?: (payload: PointerEvent) => void;
  onPointerenter?: (payload: PointerEvent) => void;
  onPointerleave?: (payload: PointerEvent) => void;
  onPointerover?: (payload: PointerEvent) => void;
  onPointerout?: (payload: PointerEvent) => void;
  onWheel?: (payload: WheelEvent) => void;
  onAnimationstart?: (payload: AnimationEvent) => void;
  onAnimationend?: (payload: AnimationEvent) => void;
  onAnimationiteration?: (payload: AnimationEvent) => void;
  onTransitionend?: (payload: TransitionEvent) => void;
  onTransitionstart?: (payload: TransitionEvent) => void;
  key?: PropertyKey;
  ref?: vue0.VNodeRef;
  ref_for?: boolean;
  ref_key?: string;
  onVnodeBeforeMount?: ((vnode: vue0.VNode) => void) | ((vnode: vue0.VNode) => void)[];
  onVnodeMounted?: ((vnode: vue0.VNode) => void) | ((vnode: vue0.VNode) => void)[];
  onVnodeBeforeUpdate?: ((vnode: vue0.VNode, oldVNode: vue0.VNode) => void) | ((vnode: vue0.VNode, oldVNode: vue0.VNode) => void)[];
  onVnodeUpdated?: ((vnode: vue0.VNode, oldVNode: vue0.VNode) => void) | ((vnode: vue0.VNode, oldVNode: vue0.VNode) => void)[];
  onVnodeBeforeUnmount?: ((vnode: vue0.VNode) => void) | ((vnode: vue0.VNode) => void)[];
  onVnodeUnmounted?: ((vnode: vue0.VNode) => void) | ((vnode: vue0.VNode) => void)[];
}, {}, {}, {}, {}, vue0.ComponentOptionsMixin, vue0.ComponentOptionsMixin, {}, string, vue0.PublicProps, Readonly<{
  foo: string;
  bar?: string;
  innerHTML?: string;
  class?: any;
  style?: vue0.StyleValue;
  accesskey?: string;
  contenteditable?: (boolean | "true" | "false") | "inherit" | "plaintext-only";
  contextmenu?: string;
  dir?: string;
  draggable?: boolean | "true" | "false";
  hidden?: (boolean | "true" | "false") | "" | "hidden" | "until-found";
  id?: string;
  inert?: boolean | "true" | "false";
  lang?: string;
  placeholder?: string;
  spellcheck?: boolean | "true" | "false";
  tabindex?: string | number;
  title?: string;
  translate?: "yes" | "no";
  radiogroup?: string;
  role?: string;
  about?: string;
  datatype?: string;
  inlist?: any;
  prefix?: string;
  property?: string;
  resource?: string;
  typeof?: string;
  vocab?: string;
  autocapitalize?: string;
  autocorrect?: string;
  autosave?: string;
  color?: string;
  itemprop?: string;
  itemscope?: boolean | "true" | "false";
  itemtype?: string;
  itemid?: string;
  itemref?: string;
  results?: string | number;
  security?: string;
  unselectable?: "on" | "off";
  inputmode?: "none" | "text" | "tel" | "url" | "email" | "numeric" | "decimal" | "search";
  is?: string;
  'aria-activedescendant'?: string;
  'aria-atomic'?: boolean | "true" | "false";
  'aria-autocomplete'?: "none" | "inline" | "list" | "both";
  'aria-busy'?: boolean | "true" | "false";
  'aria-checked'?: (boolean | "true" | "false") | "mixed";
  'aria-colcount'?: string | number;
  'aria-colindex'?: string | number;
  'aria-colspan'?: string | number;
  'aria-controls'?: string;
  'aria-current'?: (boolean | "true" | "false") | "page" | "step" | "location" | "date" | "time";
  'aria-describedby'?: string;
  'aria-details'?: string;
  'aria-disabled'?: boolean | "true" | "false";
  'aria-dropeffect'?: "none" | "copy" | "execute" | "link" | "move" | "popup";
  'aria-errormessage'?: string;
  'aria-expanded'?: boolean | "true" | "false";
  'aria-flowto'?: string;
  'aria-grabbed'?: boolean | "true" | "false";
  'aria-haspopup'?: (boolean | "true" | "false") | "menu" | "listbox" | "tree" | "grid" | "dialog";
  'aria-hidden'?: boolean | "true" | "false";
  'aria-invalid'?: (boolean | "true" | "false") | "grammar" | "spelling";
  'aria-keyshortcuts'?: string;
  'aria-label'?: string;
  'aria-labelledby'?: string;
  'aria-level'?: string | number;
  'aria-live'?: "off" | "assertive" | "polite";
  'aria-modal'?: boolean | "true" | "false";
  'aria-multiline'?: boolean | "true" | "false";
  'aria-multiselectable'?: boolean | "true" | "false";
  'aria-orientation'?: "horizontal" | "vertical";
  'aria-owns'?: string;
  'aria-placeholder'?: string;
  'aria-posinset'?: string | number;
  'aria-pressed'?: (boolean | "true" | "false") | "mixed";
  'aria-readonly'?: boolean | "true" | "false";
  'aria-relevant'?: "additions" | "additions removals" | "additions text" | "all" | "removals" | "removals additions" | "removals text" | "text" | "text additions" | "text removals";
  'aria-required'?: boolean | "true" | "false";
  'aria-roledescription'?: string;
  'aria-rowcount'?: string | number;
  'aria-rowindex'?: string | number;
  'aria-rowspan'?: string | number;
  'aria-selected'?: boolean | "true" | "false";
  'aria-setsize'?: string | number;
  'aria-sort'?: "none" | "ascending" | "descending" | "other";
  'aria-valuemax'?: string | number;
  'aria-valuemin'?: string | number;
  'aria-valuenow'?: string | number;
  'aria-valuetext'?: string;
  onCopy?: (payload: ClipboardEvent) => void;
  onCut?: (payload: ClipboardEvent) => void;
  onPaste?: (payload: ClipboardEvent) => void;
  onCompositionend?: (payload: CompositionEvent) => void;
  onCompositionstart?: (payload: CompositionEvent) => void;
  onCompositionupdate?: (payload: CompositionEvent) => void;
  onDrag?: (payload: DragEvent) => void;
  onDragend?: (payload: DragEvent) => void;
  onDragenter?: (payload: DragEvent) => void;
  onDragexit?: (payload: DragEvent) => void;
  onDragleave?: (payload: DragEvent) => void;
  onDragover?: (payload: DragEvent) => void;
  onDragstart?: (payload: DragEvent) => void;
  onDrop?: (payload: DragEvent) => void;
  onFocus?: (payload: FocusEvent) => void;
  onFocusin?: (payload: FocusEvent) => void;
  onFocusout?: (payload: FocusEvent) => void;
  onBlur?: (payload: FocusEvent) => void;
  onChange?: (payload: Event) => void;
  onBeforeinput?: (payload: Event) => void;
  onInput?: (payload: Event) => void;
  onReset?: (payload: Event) => void;
  onSubmit?: (payload: Event) => void;
  onInvalid?: (payload: Event) => void;
  onLoad?: (payload: Event) => void;
  onError?: (payload: Event) => void;
  onKeydown?: (payload: KeyboardEvent) => void;
  onKeypress?: (payload: KeyboardEvent) => void;
  onKeyup?: (payload: KeyboardEvent) => void;
  onAuxclick?: (payload: MouseEvent) => void;
  onClick?: (payload: MouseEvent) => void;
  onContextmenu?: (payload: MouseEvent) => void;
  onDblclick?: (payload: MouseEvent) => void;
  onMousedown?: (payload: MouseEvent) => void;
  onMouseenter?: (payload: MouseEvent) => void;
  onMouseleave?: (payload: MouseEvent) => void;
  onMousemove?: (payload: MouseEvent) => void;
  onMouseout?: (payload: MouseEvent) => void;
  onMouseover?: (payload: MouseEvent) => void;
  onMouseup?: (payload: MouseEvent) => void;
  onAbort?: (payload: Event) => void;
  onCanplay?: (payload: Event) => void;
  onCanplaythrough?: (payload: Event) => void;
  onDurationchange?: (payload: Event) => void;
  onEmptied?: (payload: Event) => void;
  onEncrypted?: (payload: Event) => void;
  onEnded?: (payload: Event) => void;
  onLoadeddata?: (payload: Event) => void;
  onLoadedmetadata?: (payload: Event) => void;
  onLoadstart?: (payload: Event) => void;
  onPause?: (payload: Event) => void;
  onPlay?: (payload: Event) => void;
  onPlaying?: (payload: Event) => void;
  onProgress?: (payload: Event) => void;
  onRatechange?: (payload: Event) => void;
  onSeeked?: (payload: Event) => void;
  onSeeking?: (payload: Event) => void;
  onStalled?: (payload: Event) => void;
  onSuspend?: (payload: Event) => void;
  onTimeupdate?: (payload: Event) => void;
  onVolumechange?: (payload: Event) => void;
  onWaiting?: (payload: Event) => void;
  onSelect?: (payload: Event) => void;
  onScroll?: (payload: Event) => void;
  onScrollend?: (payload: Event) => void;
  onTouchcancel?: (payload: TouchEvent) => void;
  onTouchend?: (payload: TouchEvent) => void;
  onTouchmove?: (payload: TouchEvent) => void;
  onTouchstart?: (payload: TouchEvent) => void;
  onPointerdown?: (payload: PointerEvent) => void;
  onPointermove?: (payload: PointerEvent) => void;
  onPointerup?: (payload: PointerEvent) => void;
  onPointercancel?: (payload: PointerEvent) => void;
  onPointerenter?: (payload: PointerEvent) => void;
  onPointerleave?: (payload: PointerEvent) => void;
  onPointerover?: (payload: PointerEvent) => void;
  onPointerout?: (payload: PointerEvent) => void;
  onWheel?: (payload: WheelEvent) => void;
  onAnimationstart?: (payload: AnimationEvent) => void;
  onAnimationend?: (payload: AnimationEvent) => void;
  onAnimationiteration?: (payload: AnimationEvent) => void;
  onTransitionend?: (payload: TransitionEvent) => void;
  onTransitionstart?: (payload: TransitionEvent) => void;
  key?: PropertyKey;
  ref?: vue0.VNodeRef;
  ref_for?: boolean;
  ref_key?: string;
  onVnodeBeforeMount?: ((vnode: vue0.VNode) => void) | ((vnode: vue0.VNode) => void)[];
  onVnodeMounted?: ((vnode: vue0.VNode) => void) | ((vnode: vue0.VNode) => void)[];
  onVnodeBeforeUpdate?: ((vnode: vue0.VNode, oldVNode: vue0.VNode) => void) | ((vnode: vue0.VNode, oldVNode: vue0.VNode) => void)[];
  onVnodeUpdated?: ((vnode: vue0.VNode, oldVNode: vue0.VNode) => void) | ((vnode: vue0.VNode, oldVNode: vue0.VNode) => void)[];
  onVnodeBeforeUnmount?: ((vnode: vue0.VNode) => void) | ((vnode: vue0.VNode) => void)[];
  onVnodeUnmounted?: ((vnode: vue0.VNode) => void) | ((vnode: vue0.VNode) => void)[];
}> & Readonly<{}>, {}, {}, {}, {}, string, vue0.ComponentProvideOptions, false, {}, any>;
//#endregion
export { _default as App };"
`;
