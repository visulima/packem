import { isAccessible, writeFile } from "@visulima/fs";
import { normalize } from "@visulima/path";
import type { Plugin } from "rollup";

import ensureAutoModules from "./loaders/utils/ensure-auto-modules";
import type { StyleOptions } from "./types";

const dtsComment = `
/* eslint-disable */
/* prettier-ignore */
// @ts-nocheck
/**
 * Generated by packem
 * @see https://npmjs.com/@visulima/packem
 */
`.trim();

const cssModulesTypes = (options: StyleOptions, rootDirectory: string): Plugin => {
    let optionSupportModules: boolean | undefined;

    if (options.postcss && typeof options.postcss.modules === "boolean") {
        optionSupportModules = options.postcss.modules;
    } else if (options.lightningcss && typeof options.lightningcss.modules === "boolean") {
        optionSupportModules = options.lightningcss.modules;
    }

    return <Plugin>{
        name: "css-modules-types",
        async transform(_, id: string) {
            let supportModules: boolean | undefined = optionSupportModules;

            if (options.postcss && typeof options.postcss.modules === "object") {
                supportModules = ensureAutoModules(options.postcss.modules.include, id);
            } else if (options.lightningcss && typeof options.lightningcss.modules === "object") {
                supportModules = ensureAutoModules(options.lightningcss.modules.include, id);
            }

            if (options.autoModules && supportModules === undefined) {
                supportModules = ensureAutoModules(options.autoModules, id);
            }

            if (!supportModules) {
                return undefined;
            }

            const { types } = this.getModuleInfo(id)?.meta.styles ?? {};

            if (types === undefined) {
                return undefined;
            }

            if (await isAccessible(id)) {
                await writeFile(`${id}.d.ts`, `${dtsComment}\n${types as string}`);

                this.info({
                    message: `Generated types for ${normalize(id).replace(`${rootDirectory}/`, "")}`,
                    plugin: "css-modules-types",
                });

                this.addWatchFile(`${id}.d.ts`);
            }

            return undefined;
        },
    };
};

export default cssModulesTypes;
