import type { Loader } from "esbuild";

/**
 * Default file extensions that Packem will process.
 * Includes JavaScript (ES modules and CommonJS), TypeScript, and their respective JSX/TSX variants.
 *
 * @remarks
 * These extensions are used to determine which files should be processed by the bundler.
 * The order of extensions matters for resolution priority.
 *
 * @example
 * ```ts
 * // Will match files like:
 * // - index.mjs
 * // - component.tsx
 * // - utils.cts
 * ```
 */
export const DEFAULT_EXTENSIONS: string[] = [".mjs", ".js", ".json", ".node", ".cjs", ".ts", ".cts", ".mts", ".tsx", ".ctsx", ".mtsx", ".jsx"];

/**
 * Default esbuild loaders configuration for different file extensions.
 * Maps file extensions to their corresponding esbuild loader type.
 *
 * @remarks
 * - 'file' loader is used for static assets that should be emitted as-is
 * - 'js', 'jsx', 'ts', 'tsx' loaders are used for their respective file types
 *
 * @example
 * ```ts
 * // Usage:
 * const loader = DEFAULT_LOADERS[".tsx"]; // Returns "tsx"
 * ```
 */
export const DEFAULT_LOADERS: Record<string, Loader> = {
    ".aac": "file",
    ".cjs": "js",
    ".cts": "ts",
    ".ctsx": "tsx",
    ".eot": "file",
    ".flac": "file",
    ".js": "js",
    ".jsx": "jsx",
    ".mjs": "js",
    ".mp3": "file",
    ".mp4": "file",
    ".mts": "ts",
    ".mtsx": "tsx",
    ".ogg": "file",
    ".otf": "file",
    ".ts": "ts",
    ".tsx": "tsx",
    ".ttf": "file",
    ".wav": "file",
    ".webm": "file",
    ".woff": "file",
    ".woff2": "file",
};

/**
 * Constant representing the production environment.
 * Used for environment-specific optimizations and configurations.
 *
 * @constant
 */
// eslint-disable-next-line @typescript-eslint/no-inferrable-types
export const PRODUCTION_ENV: string = "production";

/**
 * Constant representing the development environment.
 * Used for environment-specific features like source maps and debug information.
 *
 * @constant
 */
// eslint-disable-next-line @typescript-eslint/no-inferrable-types
export const DEVELOPMENT_ENV: string = "development";

/**
 * Set of runtime export conventions for special handling.
 * These conventions determine how exports are processed for different runtime targets.
 *
 * @remarks
 * Currently supports:
 * - react-server: For React Server Components
 * - react-native: For React Native platform
 * - edge-light: For Edge runtime environments
 */
export const RUNTIME_EXPORT_CONVENTIONS: Set<string> = new Set<string>(["react-server", "react-native", "edge-light"]);

/**
 * Combined set of all special export conventions including runtime and environment-specific ones.
 *
 * @remarks
 * Includes both runtime conventions and environment types (production/development).
 * Used for determining special processing rules during bundling.
 */
export const SPECIAL_EXPORT_CONVENTIONS: Set<string> = new Set<string>([DEVELOPMENT_ENV, PRODUCTION_ENV, ...RUNTIME_EXPORT_CONVENTIONS]);

/**
 * Regular expression to exclude node_modules from certain processing steps.
 *
 * @remarks
 * Used to skip processing of node_modules files when not necessary,
 * improving build performance.
 */
// eslint-disable-next-line @typescript-eslint/no-inferrable-types
export const EXCLUDE_REGEXP: RegExp = /node_modules/;

/**
 * Directory name for storing chunk files generated by Packem.
 *
 * @remarks
 * This directory contains dynamically generated chunk files for code splitting.
 */
// eslint-disable-next-line @typescript-eslint/no-inferrable-types
export const CHUNKS_PACKEM_FOLDER: string = "packem_chunks";

/**
 * Directory name for storing shared resources.
 *
 * @remarks
 * This directory contains shared resources that are used across multiple chunks
 * or entry points.
 */
// eslint-disable-next-line @typescript-eslint/no-inferrable-types
export const SHARED_PACKEM_FOLDER: string = "packem_shared";

// eslint-disable-next-line no-secrets/no-secrets
/**
 * Regular expression to match file extensions that can be transformed.
 *
 * @remarks
 * Matches JavaScript and TypeScript files, including their module variants:
 * - .js, .mjs, .cjs
 * - .ts, .mts, .cts
 * - .jsx, .tsx (and their module variants)
 *
 * @example
 * ```ts
 * const canTransform = ALLOWED_TRANSFORM_EXTENSIONS_REGEX.test("file.ts"); // true
 * const canTransform = ALLOWED_TRANSFORM_EXTENSIONS_REGEX.test("file.css"); // false
 * ```
 */
// eslint-disable-next-line @typescript-eslint/no-inferrable-types
export const ALLOWED_TRANSFORM_EXTENSIONS_REGEX: RegExp = /\.(?:m|c)?(?:j|t)sx?$/;
