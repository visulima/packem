// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`packem dynamic require > should handle dynamic require in esm > cjs 1`] = `
"'use strict';

Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });

function getAugmentedNamespace(n) {
  if (Object.prototype.hasOwnProperty.call(n, '__esModule')) return n;
  var f = n.default;
	if (typeof f == "function") {
		var a = function a () {
			var isInstance = false;
      try {
        isInstance = this instanceof a;
      } catch {}
			if (isInstance) {
        return Reflect.construct(f, arguments, this.constructor);
			}
			return f.apply(this, arguments);
		};
		a.prototype = f.prototype;
  } else a = {};
  Object.defineProperty(a, '__esModule', {value: true});
	Object.keys(n).forEach(function (k) {
		var d = Object.getOwnPropertyDescriptor(n, k);
		Object.defineProperty(a, k, d.get ? d : {
			enumerable: true,
			get: function () {
				return n[k];
			}
		});
	});
	return a;
}

var __defProp$1 = Object.defineProperty;
var __name$1 = (target, value) => __defProp$1(target, "name", { value, configurable: true });
function method() {
  return "being-required";
}
__name$1(method, "method");

const requiredModule = /*#__PURE__*/Object.defineProperty({
	__proto__: null,
	method
}, Symbol.toStringTag, { value: 'Module' });

const require$$0 = /*@__PURE__*/getAugmentedNamespace(requiredModule);

var __defProp = Object.defineProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
function index() {
  require$$0.method();
}
__name(index, "index");

exports.index = index;
"
`;

exports[`packem dynamic require > should handle dynamic require in esm > foo.cjs 1`] = `
"'use strict';

Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });

const externalLib = require('external-lib');

const _interopDefaultCompat = e => e && typeof e === 'object' && 'default' in e ? e.default : e;

const externalLib__default = /*#__PURE__*/_interopDefaultCompat(externalLib);

var __defProp = Object.defineProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
function foo() {
  return externalLib__default.method();
}
__name(foo, "foo");

exports.foo = foo;
"
`;

exports[`packem dynamic require > should handle dynamic require in esm > foo.mjs 1`] = `
"import externalLib from 'external-lib';

var __defProp = Object.defineProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
function foo() {
  return externalLib.method();
}
__name(foo, "foo");

export { foo };
"
`;

exports[`packem dynamic require > should handle dynamic require in esm > mjs 1`] = `
"function getAugmentedNamespace(n) {
  if (Object.prototype.hasOwnProperty.call(n, '__esModule')) return n;
  var f = n.default;
	if (typeof f == "function") {
		var a = function a () {
			var isInstance = false;
      try {
        isInstance = this instanceof a;
      } catch {}
			if (isInstance) {
        return Reflect.construct(f, arguments, this.constructor);
			}
			return f.apply(this, arguments);
		};
		a.prototype = f.prototype;
  } else a = {};
  Object.defineProperty(a, '__esModule', {value: true});
	Object.keys(n).forEach(function (k) {
		var d = Object.getOwnPropertyDescriptor(n, k);
		Object.defineProperty(a, k, d.get ? d : {
			enumerable: true,
			get: function () {
				return n[k];
			}
		});
	});
	return a;
}

var __defProp$1 = Object.defineProperty;
var __name$1 = (target, value) => __defProp$1(target, "name", { value, configurable: true });
function method() {
  return "being-required";
}
__name$1(method, "method");

const requiredModule = /*#__PURE__*/Object.defineProperty({
	__proto__: null,
	method
}, Symbol.toStringTag, { value: 'Module' });

const require$$0 = /*@__PURE__*/getAugmentedNamespace(requiredModule);

var __defProp = Object.defineProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
function index() {
  require$$0.method();
}
__name(index, "index");

export { index };
"
`;
