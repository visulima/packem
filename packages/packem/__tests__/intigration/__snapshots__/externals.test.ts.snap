// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`packem externals > should bundle 'devDependencies' that are used inside the code and are not marked as external > cjs dts output 1`] = `
"declare const indent: string;

export { indent };
"
`;

exports[`packem externals > should bundle 'devDependencies' that are used inside the code and are not marked as external > cjs output 1`] = `
"'use strict';

Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });

var __defProp = Object.defineProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
const INDENT_REGEX = /^(?:( )+|\\t+)/;
const INDENT_TYPE_SPACE = "space";
const INDENT_TYPE_TAB = "tab";
function makeIndentsMap(string, ignoreSingleSpaces) {
  const indents = /* @__PURE__ */ new Map();
  let previousSize = 0;
  let previousIndentType;
  let key;
  for (const line of string.split(/\\n/g)) {
    if (!line) {
      continue;
    }
    let indent;
    let indentType;
    let use;
    let weight;
    let entry;
    const matches = line.match(INDENT_REGEX);
    if (matches === null) {
      previousSize = 0;
      previousIndentType = "";
    } else {
      indent = matches[0].length;
      indentType = matches[1] ? INDENT_TYPE_SPACE : INDENT_TYPE_TAB;
      if (ignoreSingleSpaces && indentType === INDENT_TYPE_SPACE && indent === 1) {
        continue;
      }
      if (indentType !== previousIndentType) {
        previousSize = 0;
      }
      previousIndentType = indentType;
      use = 1;
      weight = 0;
      const indentDifference = indent - previousSize;
      previousSize = indent;
      if (indentDifference === 0) {
        use = 0;
        weight = 1;
      } else {
        const absoluteIndentDifference = indentDifference > 0 ? indentDifference : -indentDifference;
        key = encodeIndentsKey(indentType, absoluteIndentDifference);
      }
      entry = indents.get(key);
      entry = entry === undefined ? [1, 0] : [entry[0] + use, entry[1] + weight];
      indents.set(key, entry);
    }
  }
  return indents;
}
__name(makeIndentsMap, "makeIndentsMap");
function encodeIndentsKey(indentType, indentAmount) {
  const typeCharacter = indentType === INDENT_TYPE_SPACE ? "s" : "t";
  return typeCharacter + String(indentAmount);
}
__name(encodeIndentsKey, "encodeIndentsKey");
function decodeIndentsKey(indentsKey) {
  const keyHasTypeSpace = indentsKey[0] === "s";
  const type = keyHasTypeSpace ? INDENT_TYPE_SPACE : INDENT_TYPE_TAB;
  const amount = Number(indentsKey.slice(1));
  return { type, amount };
}
__name(decodeIndentsKey, "decodeIndentsKey");
function getMostUsedKey(indents) {
  let result;
  let maxUsed = 0;
  let maxWeight = 0;
  for (const [key, [usedCount, weight]] of indents) {
    if (usedCount > maxUsed || usedCount === maxUsed && weight > maxWeight) {
      maxUsed = usedCount;
      maxWeight = weight;
      result = key;
    }
  }
  return result;
}
__name(getMostUsedKey, "getMostUsedKey");
function makeIndentString(type, amount) {
  const indentCharacter = type === INDENT_TYPE_SPACE ? " " : "	";
  return indentCharacter.repeat(amount);
}
__name(makeIndentString, "makeIndentString");
function detectIndent(string) {
  if (typeof string !== "string") {
    throw new TypeError("Expected a string");
  }
  let indents = makeIndentsMap(string, true);
  if (indents.size === 0) {
    indents = makeIndentsMap(string, false);
  }
  const keyOfMostUsedIndent = getMostUsedKey(indents);
  let type;
  let amount = 0;
  let indent = "";
  if (keyOfMostUsedIndent !== undefined) {
    ({ type, amount } = decodeIndentsKey(keyOfMostUsedIndent));
    indent = makeIndentString(type, amount);
  }
  return {
    amount,
    type,
    indent
  };
}
__name(detectIndent, "detectIndent");

const { indent: dIndent } = detectIndent("  file");
const indent = dIndent;

exports.indent = indent;
"
`;

exports[`packem externals > should bundle 'devDependencies' that are used inside the code and are not marked as external > dts output 1`] = `
"declare const indent: string;

export { indent };
"
`;

exports[`packem externals > should bundle 'devDependencies' that are used inside the code and are not marked as external > mjs dts output 1`] = `
"declare const indent: string;

export { indent };
"
`;

exports[`packem externals > should bundle 'devDependencies' that are used inside the code and are not marked as external > mjs output 1`] = `
"var __defProp = Object.defineProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
const INDENT_REGEX = /^(?:( )+|\\t+)/;
const INDENT_TYPE_SPACE = "space";
const INDENT_TYPE_TAB = "tab";
function makeIndentsMap(string, ignoreSingleSpaces) {
  const indents = /* @__PURE__ */ new Map();
  let previousSize = 0;
  let previousIndentType;
  let key;
  for (const line of string.split(/\\n/g)) {
    if (!line) {
      continue;
    }
    let indent;
    let indentType;
    let use;
    let weight;
    let entry;
    const matches = line.match(INDENT_REGEX);
    if (matches === null) {
      previousSize = 0;
      previousIndentType = "";
    } else {
      indent = matches[0].length;
      indentType = matches[1] ? INDENT_TYPE_SPACE : INDENT_TYPE_TAB;
      if (ignoreSingleSpaces && indentType === INDENT_TYPE_SPACE && indent === 1) {
        continue;
      }
      if (indentType !== previousIndentType) {
        previousSize = 0;
      }
      previousIndentType = indentType;
      use = 1;
      weight = 0;
      const indentDifference = indent - previousSize;
      previousSize = indent;
      if (indentDifference === 0) {
        use = 0;
        weight = 1;
      } else {
        const absoluteIndentDifference = indentDifference > 0 ? indentDifference : -indentDifference;
        key = encodeIndentsKey(indentType, absoluteIndentDifference);
      }
      entry = indents.get(key);
      entry = entry === undefined ? [1, 0] : [entry[0] + use, entry[1] + weight];
      indents.set(key, entry);
    }
  }
  return indents;
}
__name(makeIndentsMap, "makeIndentsMap");
function encodeIndentsKey(indentType, indentAmount) {
  const typeCharacter = indentType === INDENT_TYPE_SPACE ? "s" : "t";
  return typeCharacter + String(indentAmount);
}
__name(encodeIndentsKey, "encodeIndentsKey");
function decodeIndentsKey(indentsKey) {
  const keyHasTypeSpace = indentsKey[0] === "s";
  const type = keyHasTypeSpace ? INDENT_TYPE_SPACE : INDENT_TYPE_TAB;
  const amount = Number(indentsKey.slice(1));
  return { type, amount };
}
__name(decodeIndentsKey, "decodeIndentsKey");
function getMostUsedKey(indents) {
  let result;
  let maxUsed = 0;
  let maxWeight = 0;
  for (const [key, [usedCount, weight]] of indents) {
    if (usedCount > maxUsed || usedCount === maxUsed && weight > maxWeight) {
      maxUsed = usedCount;
      maxWeight = weight;
      result = key;
    }
  }
  return result;
}
__name(getMostUsedKey, "getMostUsedKey");
function makeIndentString(type, amount) {
  const indentCharacter = type === INDENT_TYPE_SPACE ? " " : "	";
  return indentCharacter.repeat(amount);
}
__name(makeIndentString, "makeIndentString");
function detectIndent(string) {
  if (typeof string !== "string") {
    throw new TypeError("Expected a string");
  }
  let indents = makeIndentsMap(string, true);
  if (indents.size === 0) {
    indents = makeIndentsMap(string, false);
  }
  const keyOfMostUsedIndent = getMostUsedKey(indents);
  let type;
  let amount = 0;
  let indent = "";
  if (keyOfMostUsedIndent !== undefined) {
    ({ type, amount } = decodeIndentsKey(keyOfMostUsedIndent));
    indent = makeIndentString(type, amount);
  }
  return {
    amount,
    type,
    indent
  };
}
__name(detectIndent, "detectIndent");

const { indent: dIndent } = detectIndent("  file");
const indent = dIndent;

export { indent };
"
`;

exports[`packem externals > should handle externals with peerDependenciesMeta > cjs output 1`] = `
"'use strict';

const a = require('peer-dep');
const b = require('peer-dep-meta');

const _interopDefaultCompat = e => e && typeof e === 'object' && 'default' in e ? e.default : e;

const a__default = /*#__PURE__*/_interopDefaultCompat(a);
const b__default = /*#__PURE__*/_interopDefaultCompat(b);

const index = a__default + b__default;

module.exports = index;
"
`;

exports[`packem externals > should handle externals with peerDependenciesMeta > mjs output 1`] = `
"import a from 'peer-dep';
import b from 'peer-dep-meta';

const index = a + b;

export { index as default };
"
`;

exports[`packem externals > should not bundle 'devDependencies' that are namespaced and used inside the code and are marked as external with 'peerDependencies' and 'peerDependenciesMeta' > cjs dts output 1`] = `
"import * as _svgr_core from '@svgr/core';

declare const transform: {
    (code: string, config?: _svgr_core.Config, state?: Partial<_svgr_core.State>): Promise<string>;
    sync(code: string, config?: _svgr_core.Config, state?: Partial<_svgr_core.State>): string;
};

export { transform };
"
`;

exports[`packem externals > should not bundle 'devDependencies' that are namespaced and used inside the code and are marked as external with 'peerDependencies' and 'peerDependenciesMeta' > cjs output 1`] = `
"'use strict';

Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });

const core = require('@svgr/core');

const transform = core.transform;

exports.transform = transform;
"
`;

exports[`packem externals > should not bundle 'devDependencies' that are namespaced and used inside the code and are marked as external with 'peerDependencies' and 'peerDependenciesMeta' > dts output 1`] = `
"import * as _svgr_core from '@svgr/core';

declare const transform: {
    (code: string, config?: _svgr_core.Config, state?: Partial<_svgr_core.State>): Promise<string>;
    sync(code: string, config?: _svgr_core.Config, state?: Partial<_svgr_core.State>): string;
};

export { transform };
"
`;

exports[`packem externals > should not bundle 'devDependencies' that are namespaced and used inside the code and are marked as external with 'peerDependencies' and 'peerDependenciesMeta' > mjs dts output 1`] = `
"import * as _svgr_core from '@svgr/core';

declare const transform: {
    (code: string, config?: _svgr_core.Config, state?: Partial<_svgr_core.State>): Promise<string>;
    sync(code: string, config?: _svgr_core.Config, state?: Partial<_svgr_core.State>): string;
};

export { transform };
"
`;

exports[`packem externals > should not bundle 'devDependencies' that are namespaced and used inside the code and are marked as external with 'peerDependencies' and 'peerDependenciesMeta' > mjs output 1`] = `
"import { transform as transform$1 } from '@svgr/core';

const transform = transform$1;

export { transform };
"
`;

exports[`packem externals > should not bundle 'devDependencies' that are used inside the code and are marked as external with 'peerDependencies' and 'peerDependenciesMeta' > cjs dts output 1`] = `
"declare const indent: string;

export { indent };
"
`;

exports[`packem externals > should not bundle 'devDependencies' that are used inside the code and are marked as external with 'peerDependencies' and 'peerDependenciesMeta' > cjs output 1`] = `
"'use strict';

Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });

const detectIndentFn = require('detect-indent');

const _interopDefaultCompat = e => e && typeof e === 'object' && 'default' in e ? e.default : e;

const detectIndentFn__default = /*#__PURE__*/_interopDefaultCompat(detectIndentFn);

const { indent: dIndent } = detectIndentFn__default("  file");
const indent = dIndent;

exports.indent = indent;
"
`;

exports[`packem externals > should not bundle 'devDependencies' that are used inside the code and are marked as external with 'peerDependencies' and 'peerDependenciesMeta' > dts output 1`] = `
"declare const indent: string;

export { indent };
"
`;

exports[`packem externals > should not bundle 'devDependencies' that are used inside the code and are marked as external with 'peerDependencies' and 'peerDependenciesMeta' > mjs dts output 1`] = `
"declare const indent: string;

export { indent };
"
`;

exports[`packem externals > should not bundle 'devDependencies' that are used inside the code and are marked as external with 'peerDependencies' and 'peerDependenciesMeta' > mjs output 1`] = `
"import detectIndentFn from 'detect-indent';

const { indent: dIndent } = detectIndentFn("  file");
const indent = dIndent;

export { indent };
"
`;
